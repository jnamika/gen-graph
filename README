a python code generating and converting labeled graphs

How to use:

(1) call on the command-line

    Usage: gen_graph.py [-n block-length] file ...

The program displays a minimal labeled graph which generates symbolic sequences in files (a value in round brackets represents the transition probability).

Example:

> cat data.txt
a
b
a
c
-- snip --
b
c
a
c
> python gen_graph.py data.txt
digraph mygraph{
"0" -> "1" [label="a(0.555556)"]
"0" -> "2" [label="a(0.444444)"]
"1" -> "0" [label="c(0.600000)"]
"1" -> "3" [label="d(0.400000)"]
"2" -> "0" [label="b(0.500000)"]
"2" -> "3" [label="d(0.500000)"]
"3" -> "0" [label="b(0.500000)"]
"3" -> "0" [label="c(0.500000)"]
}



(2) call in a python script

This script contains functions which convert a labeled graph to 
    1. non-terminate graph
    2. right-resolving graph
    3. minimal graph


Example:

> python
Python 2.5.2 (r252:60911, Jan 24 2010, 17:44:40) 
[GCC 4.3.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> from gen_graph import *
>>> graph = [[['a'],[],[],['a','b']],[[],[],['a'],[]],[[],[],[],[]],[['b'],['a'],[],[]]]
>>> print_labeled_graph(graph)
digraph mygraph{
"0" -> "0" [label="a"]
"0" -> "3" [label="a"]
"0" -> "3" [label="b"]
"1" -> "2" [label="a"]
"3" -> "0" [label="b"]
"3" -> "1" [label="a"]
}
>>> graph = gen_nonterminate_graph(graph)
>>> print_labeled_graph(graph)
digraph mygraph{
"0" -> "0" [label="a"]
"0" -> "1" [label="a"]
"0" -> "1" [label="b"]
"1" -> "0" [label="b"]
}
>>> graph = gen_right_resolving_graph(graph)
>>> print_labeled_graph(graph)
digraph mygraph{
"0" -> "1" [label="b"]
"0" -> "2" [label="a"]
"1" -> "0" [label="b"]
"2" -> "2" [label="a"]
"2" -> "2" [label="b"]
}
>>> graph = gen_minimal_graph(graph)
>>> print_labeled_graph(graph)
digraph mygraph{
"0" -> "0" [label="a"]
"0" -> "0" [label="b"]
"0" -> "1" [label="b"]
"1" -> "0" [label="b"]
}

